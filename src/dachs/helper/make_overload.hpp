// Boost Software License - Version 1.0 - August 17th, 2003
//
// Copyright (C) 2014 fimbul
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#if !defined DACHS_HELPER_MAKE_OVERLOAD_HPP_INCLUDED
#define      DACHS_HELPER_MAKE_OVERLOAD_HPP_INCLUDED

namespace dachs {
namespace helper {

template<class F, class... FS>
struct overloaded_function : F, overloaded_function<FS...> {
    using F::operator();
    using overloaded_function<FS...>::operator();

    overloaded_function(F const& f, FS... fs) noexcept
        : F(f), overloaded_function<FS...>(fs...)
    {}
};

template<class F>
struct overloaded_function<F> : F {
    using F::operator();

    overloaded_function(F const& f) noexcept
        : F(f)
    {}
};

template<class... FS>
inline auto make_overload(FS const&... fs)
{
    return overloaded_function<FS...>(fs...);
}

} // namespace helper
} // namespace dachs

#endif    // DACHS_HELPER_MAKE_OVERLOAD_HPP_INCLUDED
